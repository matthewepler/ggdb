'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _webpack = require('webpack');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dotenv = function () {
  function Dotenv(options) {
    _classCallCheck(this, Dotenv);

    options = _extends({
      path: './.env',
      safe: false,
      sample: './.env.example',
      systemvars: false
    }, options);

    var vars = options.systemvars ? _extends({}, process.env) : {};
    var env = this.loadFile(options.path);
    var blueprint = options.safe ? this.loadFile(options.sample) : env;

    Object.keys(blueprint).map(function (key) {
      var value = env[key] || env[key];
      if (!value) {
        throw new Error('Missing environment variable: ' + key);
      } else {
        vars[key] = value;
      }
    });

    return new _webpack.DefinePlugin({
      'process.env': JSON.stringify(vars)
    });
  }

  _createClass(Dotenv, [{
    key: 'loadFile',
    value: function loadFile(file) {
      try {
        return _dotenv2.default.parse(_fs2.default.readFileSync(file));
      } catch (err) {
        console.warn('Failed to load ' + file + '.');
        return {};
      }
    }
  }]);

  return Dotenv;
}();

exports.default = Dotenv;